name: Daily Surf Check

on:
  schedule:
    # Run at 8 AM Pacific Time (15:00 UTC)
    - cron: '0 15 * * *'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install cheerio
          npm install @emailjs/nodejs
          npm install axios

      - name: Check surf conditions
        env:
          NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          NEXT_PUBLIC_EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
          NEXT_PUBLIC_TARGET_BEACH: "Long-Beach_6"
          NEXT_PUBLIC_SURF_FORECAST_URL: "https://www.surf-forecast.com"
        run: |
          node -e '
          const cheerio = require("cheerio");
          const { init, send } = require("@emailjs/nodejs");
          const axios = require("axios");

          const COMPASS_DIRECTIONS = [
            "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE",
            "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"
          ];

          const SURF_CONDITIONS = {
            good: {
              waveHeight: { min: 1, max: 2 },
              wave: {
                preferredDirections: ["S", "SSW", "SW", "WSW", "W"],
                periodMin: 12,
                periodMax: 21
              },
              wind: { maxSpeed: 15 }
            }
          };

          function getOpposingWindDirections(waveDirection) {
            const waveIndex = COMPASS_DIRECTIONS.indexOf(waveDirection);
            if (waveIndex === -1) return [];
            
            const oppositeIndex = (waveIndex + 8) % 16;
            const validWindDirections = [];
            for (let i = -2; i <= 2; i++) {
              const windIndex = (oppositeIndex + i + 16) % 16;
              validWindDirections.push(COMPASS_DIRECTIONS[windIndex]);
            }
            
            return validWindDirections;
          }

          async function scrapeSurfConditions(beach) {
            try {
              const url = `${process.env.NEXT_PUBLIC_SURF_FORECAST_URL}/breaks/${beach}/forecasts/latest/six_day`;
              console.log("Fetching from:", url);

              const response = await axios.get(url, {
                headers: {
                  "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
                }
              });

              if (response.status !== 200) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }

              const html = response.data;
              const $ = cheerio.load(html);
              console.log("Page loaded successfully");

              const periodRow = $(".forecast-table__row[data-row-name='periods']");
              console.log("Period row found:", periodRow.length > 0);

              const periodValues = [];
              if (periodRow.length > 0) {
                const periodCells = periodRow.find(".forecast-table__cell");
                console.log("Period cells found:", periodCells.length);
                
                periodCells.each((i, cell) => {
                  const periodText = $(cell).find("strong").text().trim();
                  periodValues.push(parseInt(periodText) || 0);
                });
              }
              console.log("Period values:", periodValues);

              const waveCells = $(".forecast-table-wave-height__cell");
              
              const today = new Date();
              today.setHours(0, 0, 0, 0);
              
              const detailedForecast = {
                today: { morning: null, afternoon: null, night: null },
                day2: { morning: null, afternoon: null, night: null },
                day3: { morning: null, afternoon: null, night: null },
                day4: { morning: null, afternoon: null, night: null },
                day5: { morning: null, afternoon: null, night: null },
                day6: { morning: null, afternoon: null, night: null },
                day7: { morning: null, afternoon: null, night: null }
              };

              let currentWaveHeight = 0;
              let currentWavePeriod = 0;
              let currentWindSpeed = 0;
              let currentWindDirection = "N/A";
              let currentWaveDirection = "N/A";
              
              let hasGoodConditions = false;
              let goodConditionsDetails = [];

              waveCells.each((index, cell) => {
                // Only process first 21 cells (7 days * 3 periods)
                if (index >= 21) return;

                const $cell = $(cell);
                const dayIndex = Math.floor(index / 3);
                const dayKey = dayIndex === 0 ? "today" : `day${dayIndex + 1}`;
                const timeOfDay = index % 3 === 0 ? "morning" : index % 3 === 1 ? "afternoon" : "night";
                
                try {
                  const summaryHeight = parseFloat($cell.find(".swell-icon__val").text().trim()) || 0;
                  const direction = $cell.find(".swell-icon__letters").text().trim();
                  const windData = JSON.parse($cell.attr("data-wind") || "{}");

                  const forecastDate = new Date(today);
                  forecastDate.setDate(today.getDate() + dayIndex);
                  
                  const formattedDate = forecastDate.toLocaleDateString("en-US", {
                    weekday: "short",
                    month: "short",
                    day: "numeric"
                  });

                  if (index === 0) {
                    currentWaveHeight = summaryHeight;
                    currentWavePeriod = periodValues[0] || 0;
                    currentWindSpeed = windData.speed || 0;
                    currentWindDirection = windData.direction?.letters || "N/A";
                    currentWaveDirection = direction;
                  }

                  const timeData = {
                    wave: {
                      height: summaryHeight,
                      direction: direction,
                      period: periodValues[index] || 0
                    },
                    wind: {
                      speed: windData.speed || 0,
                      direction: windData.direction?.letters || "N/A"
                    },
                    timestamp: forecastDate.toISOString(),
                    formattedDate: formattedDate
                  };

                  const { isGood } = areFavorableConditions({
                    waveHeight: timeData.wave.height,
                    wavePeriod: timeData.wave.period,
                    waveDirection: timeData.wave.direction,
                    windSpeed: timeData.wind.speed,
                    windDirection: timeData.wind.direction
                  }, SURF_CONDITIONS);

                  timeData.isGood = isGood;
                  
                  if (isGood) {
                    hasGoodConditions = true;
                    console.log(`Found good conditions on ${formattedDate} ${timeOfDay}:`, timeData);
                    goodConditionsDetails.push({
                      date: formattedDate,
                      timeOfDay,
                      ...timeData
                    });
                  }

                  detailedForecast[dayKey][timeOfDay] = timeData;
                } catch (error) {
                  console.error(`Error parsing ${dayKey} ${timeOfDay} data:`, error);
                }
              });

              return {
                waveHeight: currentWaveHeight,
                wavePeriod: currentWavePeriod,
                waveDirection: currentWaveDirection,
                windDirection: currentWindDirection,
                windSpeed: currentWindSpeed,
                timestamp: new Date().toISOString(),
                detailedForecast,
                hasGoodConditions,
                goodConditionsDetails
              };
            } catch (error) {
              console.error("Error scraping conditions:", error.message);
              if (error.response) {
                console.error("Response status:", error.response.status);
                console.error("Response headers:", error.response.headers);
              }
              throw error;
            }
          }

          function areFavorableConditions(conditions, criteria) {
            const { wave, wind } = {
              wave: {
                height: conditions.waveHeight,
                period: conditions.wavePeriod,
                direction: conditions.waveDirection
              },
              wind: {
                speed: conditions.windSpeed,
                direction: conditions.windDirection
              }
            };

            const validWindDirections = getOpposingWindDirections(wave.direction);
            console.log(`Wave direction: ${wave.direction}, Valid wind directions:`, validWindDirections);

            const checks = {
              height: wave.height >= criteria.good.waveHeight.min && wave.height <= criteria.good.waveHeight.max,
              direction: criteria.good.wave.preferredDirections.includes(wave.direction),
              period: wave.period >= criteria.good.wave.periodMin && wave.period <= criteria.good.wave.periodMax,
              windSpeed: wind.speed <= criteria.good.wind.maxSpeed,
              windDirection: validWindDirections.includes(wind.direction),
              waveHeight: wave.height,
              waveDirection: wave.direction,
              wavePeriod: wave.period,
              windDir: wind.direction
            };

            const isGood = checks.height && checks.direction && checks.period && checks.windSpeed && checks.windDirection;
            
            if (!isGood) {
              console.log("Failed checks:", Object.entries(checks)
                .filter(([_, value]) => !value)
                .map(([key]) => key)
                .join(", "));
            }
            
            return { isGood };
          }

          async function sendEmail(conditions) {
            try {
              console.log("Preparing to send email...");
              
              // Create a message with the good conditions details
              const goodConditionsText = conditions.goodConditionsDetails
                .map(c => `${c.date} ${c.timeOfDay}: ${c.wave.height}m ${c.wave.direction} @ ${c.wave.period}s, wind ${c.wind.speed}km/h ${c.wind.direction}`)
                .join("\n");

              console.log("Sending email via REST API...");
              const response = await axios.post(
                "https:\/\/api.emailjs.com\/api\/v1.0\/email\/send",
                {
                  service_id: process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID,
                  template_id: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID,
                  user_id: process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY,
                  accessToken: process.env.NEXT_PUBLIC_EMAILJS_PRIVATE_KEY,
                  template_params: {
                    good_conditions: goodConditionsText,
                    message: "Good surf conditions found!"
                  }
                },
                {
                  headers: {
                    "content-type": "application/json",
                    "origin": "https:\/\/api.emailjs.com"
                  }
                }
              );
              
              console.log("Email sent successfully:", response.status);
            } catch (error) {
              console.error("Error sending email:", error.response ? error.response.data : error.message);
              console.error("EmailJS configuration:", {
                serviceId: process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID,
                templateId: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID,
                publicKey: "..." + process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY.slice(-4)
              });
              throw error;
            }
          }

          async function main() {
            try {
              console.log("Starting surf check...");
              const conditions = await scrapeSurfConditions(process.env.NEXT_PUBLIC_TARGET_BEACH);
              console.log("Scraped conditions:", conditions);
              
              if (conditions.hasGoodConditions) {
                console.log("Found good conditions in the forecast, sending email...");
                await sendEmail(conditions);
                console.log("Email notification sent");
              } else {
                console.log("No good conditions found in the forecast, skipping email");
              }
            } catch (error) {
              console.error("Error in main:", error);
              process.exit(1);
            }
          }

          main();' 