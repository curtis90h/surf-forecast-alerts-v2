name: Daily Surf Check

on:
  schedule:
    # Run at 8 AM Pacific Time (15:00 UTC)
    - cron: '0 15 * * *'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install cheerio
          npm install @emailjs/nodejs
          npm install axios

      - name: Check surf conditions
        env:
          NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          NEXT_PUBLIC_TARGET_BEACH: "Long-Beach_6"
          NEXT_PUBLIC_SURF_FORECAST_URL: "https://www.surf-forecast.com"
        run: |
          node -e '
          const cheerio = require("cheerio");
          const emailjs = require("@emailjs/nodejs");
          const axios = require("axios");

          const SURF_CONDITIONS = {
            good: {
              waveHeight: { min: 1, max: 2 },
              wave: {
                preferredDirections: ["S", "SW", "W"],
                periodMin: 12,
                periodMax: 21
              },
              wind: { maxSpeed: 15 }
            }
          };

          async function scrapeSurfConditions(beach) {
            try {
              const url = `${process.env.NEXT_PUBLIC_SURF_FORECAST_URL}/breaks/${beach}/forecasts/latest/six_day`;
              console.log("Fetching from:", url);

              const response = await axios.get(url, {
                headers: {
                  "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
                }
              });

              if (response.status !== 200) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }

              const html = response.data;
              const $ = cheerio.load(html);
              console.log("Page loaded successfully");

              // Get wave data from the first forecast cell
              const waveCell = $(".forecast-table tbody tr:first-child td:nth-child(3)");
              console.log("Wave cell found:", waveCell.length > 0);

              // Extract wave height (looking for the primary number in the cell)
              const waveText = waveCell.text().trim();
              console.log("Wave text:", waveText);
              const waveMatch = waveText.match(/(\d+\.?\d*)/);
              const waveHeight = waveMatch ? parseFloat(waveMatch[1]) : 0;

              // Extract wave direction
              const waveDirectionElement = waveCell.find("span[title]");
              const waveDirection = waveDirectionElement.attr("title")?.split(" ")[0] || "N/A";

              // Extract wave period (looking for the number followed by s)
              const periodMatch = waveText.match(/(\d+)s/);
              const wavePeriod = periodMatch ? parseFloat(periodMatch[1]) : 0;

              // Get wind data
              const windCell = $(".forecast-table tbody tr:first-child td:nth-child(4)");
              
              // Extract wind speed
              const windText = windCell.text().trim();
              const windMatch = windText.match(/(\d+)/);
              const windSpeed = windMatch ? parseFloat(windMatch[1]) : 0;

              // Extract wind direction
              const windDirElement = windCell.find("span[title]");
              const windDirection = windDirElement.attr("title")?.split(" ")[0] || "N/A";

              console.log("Scraped raw values:", {
                waveHeight,
                wavePeriod,
                waveDirection,
                windDirection,
                windSpeed
              });

              if (waveHeight === 0 && wavePeriod === 0 && !waveDirection && !windDirection && windSpeed === 0) {
                throw new Error("Failed to scrape any valid conditions - possible website structure change or blocking");
              }

              return {
                waveHeight,
                wavePeriod,
                waveDirection,
                windDirection,
                windSpeed
              };
            } catch (error) {
              console.error("Error scraping conditions:", error.message);
              if (error.response) {
                console.error("Response status:", error.response.status);
                console.error("Response headers:", error.response.headers);
              }
              throw error;
            }
          }

          function areFavorableConditions(conditions, criteria) {
            const { wave, wind } = {
              wave: {
                height: conditions.waveHeight,
                period: conditions.wavePeriod,
                direction: conditions.waveDirection
              },
              wind: {
                speed: conditions.windSpeed,
                direction: conditions.windDirection
              }
            };

            console.log("Checking conditions:", { wave, wind });
            console.log("Against criteria:", criteria.good);

            const checks = {
              height: wave.height >= criteria.good.waveHeight.min && wave.height <= criteria.good.waveHeight.max,
              direction: criteria.good.wave.preferredDirections.includes(wave.direction),
              period: wave.period >= criteria.good.wave.periodMin && wave.period <= criteria.good.wave.periodMax,
              windSpeed: wind.speed <= criteria.good.wind.maxSpeed,
              windDirection: ["E", "ENE", "ESE"].includes(wind.direction), // Offshore winds
              waveHeight: wave.height,
              waveDirection: wave.direction,
              wavePeriod: wave.period,
              windDir: wind.direction
            };

            console.log("Condition checks:", checks);

            const isGood = checks.height && checks.direction && checks.period && checks.windSpeed && checks.windDirection;
            
            return { isGood };
          }

          async function sendEmail(conditions) {
            try {
              console.log("Initializing EmailJS...");
              emailjs.init({
                publicKey: process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY,
              });
              
              console.log("Sending email...");
              const response = await emailjs.send(
                process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID,
                process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID,
                {}, // Template is static
                {
                  publicKey: process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY,
                }
              );
              
              console.log("Email sent successfully:", response);
            } catch (error) {
              console.error("Error sending email:", error);
              console.error("EmailJS configuration:", {
                serviceId: process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID,
                templateId: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID,
                publicKey: "..." + process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY.slice(-4)
              });
              throw error;
            }
          }

          async function main() {
            try {
              console.log("Starting surf check...");
              const conditions = await scrapeSurfConditions(process.env.NEXT_PUBLIC_TARGET_BEACH);
              console.log("Scraped conditions:", conditions);
              
              const { isGood } = areFavorableConditions(conditions, SURF_CONDITIONS);
              console.log("Conditions favorable:", isGood);
              
              if (isGood) {
                console.log("Conditions are good, sending email...");
                await sendEmail(conditions);
                console.log("Email notification sent");
              } else {
                console.log("Conditions not favorable, skipping email");
              }
            } catch (error) {
              console.error("Error in main:", error);
              process.exit(1);
            }
          }

          main();
          ' 